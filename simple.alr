#
# Simple alarm control file
#

# Required API functions
from os import system
from time import sleep
from sys import exit
from syslog import syslog, LOG_INFO, LOG_DEBUG, LOG_WARNING, closelog
from alarmd.port import increment_sensors, zero_sensors
from alarmd.port import set_bit, set_sensor_event
from alarmd.vmqueue import vmqueue


# Alarm hardware
# Type		PCB     Phys    BCM     Log     Name
SENSOR		S01	27	0	0	SpareSensor1
SENSOR		S02	26	7	1	Entrance
SENSOR		S03	32	12	0	SpareSensor3
SENSOR		S04	28	31	0	SpareSensor4
SENSOR		S05	36	16	0	SpareSensor5
SENSOR		S06	37	26	0	SpareSensor6
SPARE		S07	40	21	0	SpareSensor7
SPARE		S08	38	20	0	SpareSensor8
SPARE		S09	11	17	0	SpareSensor9
SENSOR		S10	7	4	0	SpareSensor10
SENSOR		S11	13	27	1	Entrance
SENSOR		S12	12	18	0	SpareSensor11
SENSOR		S13	16	23	0	SpareSensor12
SENSOR		S14	15	22	0	SpareSensor13
SENSOR		S15	22	25	0	SpareSensor14
SENSOR		S16	18	24	1	Kitchen
ACTUATOR	A1	29	5	0	Siren
ACTUATOR	A2	31	6	0	SpareActuator1
ACTUATOR	A3	33	13	0	SpareActuator2
ACTUATOR	A4	35	19	0	SpareActuator3

# Alarm states and transition rules

# Initial state
%i disarm

*:
	CmdDayArm > day_arm
	CmdLeave > leave
	CmdDisarm > disarm
	CmdQuit > exit
	;

exit:
	| set_bit("Siren", MAIN_OFF)
	| closelog()
	| exit(0)
	;

disarm:
	| syslog(LOG_INFO, "Disarmed")
	| set_bit("Siren", MAIN_OFF)
	| unlink(STATUSPATH "dayarm")
	| touch(STATUSPATH "disarm")
	| set_sensor_event(ALL, None)
	| zero_sensors()
	> living
	;

leave:
	| set_sensor_event(ALL, None)
	| set_sensor_event("Door2", "ActiveSensor")
	> wait_for_door_open
	;

wait_for_door_open:
	| syslog(LOG_INFO, "Waiting for door open")
	ActiveSensor > door_open
	;

door_open:
	| syslog(LOG_INFO, "Opening outside door")
	| system("vm shell -v -x 1 -l modem -S /usr/bin/perl " SCRIPTDIR "/call.pl 32")
	300s > day_arm
	;

arm_init:
	| zero_sensors()
	| set_sensor_event(ALL, "ActiveSensor")
	| ClearCounter(day_alarm)
	| unlink(STATUSPATH "dayarm")
	| unlink(STATUSPATH "disarm")
	;

day_arm:
	| call arm_init
	| set_sensor_event("Door", "DelayedSensor")
	| touch(STATUSPATH "dayarm")
	> day_armed
	;

day_armed:
	| syslog(LOG_INFO, "Day armed")
	DelayedSensor > check_entry
	ActiveSensor > day_alarm
	;

check_entry:
	5s > day_alarm
	;

day_alarm:
	| syslog(LOG_INFO, "Day alarm")
	| increment_sensors()
	| set_bit("Siren", MAIN_ON)
	300s > day_rearm
	;

day_rearm:
	| syslog(LOG_INFO, "Day rearm")
	| set_bit("Siren", MAIN_OFF)
	|=1 sleep(90)
	> day_armed
	;

living:
	;
